/*
* @Author: kabbo
* @Date:   2020-06-24 08:40:07
* @Last Modified by:   kabbo
* @Last Modified time: 2020-06-24 08:49:58
*/
#include<bits/stdc++.h>
using namespace std;
#define pii pair<long long,long long>
#define endl '\n'
#define ll int64_t

#define ar array
// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0200r0.html
// template<class Fun>
// class y_combinator_result {
// 	Fun fun_;
// public:
// 	template<class T>
// 	explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}

// 	template<class ...Args>
// 	decltype(auto) operator()(Args &&...args) {
// 		return fun_(std::ref(*this), std::forward<Args>(args)...);
// 	}
// };

// template<class Fun>
// decltype(auto) y_combinator(Fun &&fun) {
// 	return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));
// }
// const int mod = 1e9 + 7;
// using u64 = uint64_t;
// using u128 = __uint128_t;
// #define sc1(x) scanf("%lld",&(x));
// const int X = 1e5 + 5;


// bitset<X> is_prime;
// vector<int> pf;
// vector<int> pr;

// void init() {
// 	pf.resize(X, 0);
// 	is_prime.flip();
// 	is_prime[0] = is_prime[1] = false;
// 	for (int i = 2; i < X; i++) {
// 		if (is_prime[i]) {
// 			pr.push_back(i);
// 			pf[i] = i;
// 		}
// 		for (int p : pr) {
// 			if ((ll)i * p >= X) break;
// 			pf[i * p] = p;
// 			is_prime[i * p] = false;
// 			if (i % p == 0) break;
// 		}
// 	}
// }


void solve() {
	string str;
	cin >> str;
	string temp = str;
	while (true) {
		bool flag = true;
		string st;
		for (int i(0); i < (int)temp.size();) {
			char ch = temp[i];

			int cnt = 0;
			while (ch == temp[i] and i < (int)temp.size()) {
				i++, cnt++;
			}

			if (cnt & 1)
				st += ch;
			else
				flag = false;

		}
		temp = st;
		if (flag) {
			cout << (st.empty() ? "Empty String" : st) << endl;
			break;
		}

	}
}
int main() {
	init();
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	// int t;
	// cin >> t;
	// for (int i(1); i <= t; ++i) {
	//printf("Case %d:\n", i);
	solve();
	//}
	return 0;
}